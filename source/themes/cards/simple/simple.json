{
  "★ Title": "What will this print out?",


  "☆ Subtitle": "Anonymous functions",


  "☆ Syntax (inline code)": "filter(<b>lambda<\/b>...)",


  "★ Sample (code block or image)": "<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\"><\/a>my_list <span class=\"op\">=<\/span> <span class=\"bu\">range<\/span>(<span class=\"dv\">16<\/span>)<\/span>\r\n<span id=\"cb1-2\"><a href=\"#cb1-2\"><\/a><span class=\"bu\">print<\/span>(<span class=\"bu\">filter<\/span>(<span class=\"kw\">lambda<\/span> x: x <span class=\"op\">%<\/span> <span class=\"dv\">3<\/span> <span class=\"op\">==<\/span> <span class=\"dv\">0<\/span>, my_list))<\/span><\/code><\/pre><\/div>",


  "★ Key point (code block or image)": "<pre>[0, 3, 6, 9, 12, 15]<\/pre>",


  "★ Key point notes": "<ul>\r\n<li><strong>Lambda<\/strong> is an <strong>anonymous function<\/strong>.\r\n<ul>\r\n<li>Similar to a <strong>regular <code>def<\/code> function<\/strong>.<br>\r\n<\/li>\r\n<\/ul><\/li>\r\n<li><code>x<\/code> receives an <code>int<\/code> and returns <code>True<\/code> if divisible by 3.<\/li>\r\n<li><code>filter(function, iterable)<\/code><\/li>\r\n<li>See also: <a href=\"https:\/\/stackoverflow.com\/a\/3013686\">Filter <em>-vs-<\/em> list comprehension<\/a><\/li>\r\n<\/ul>\r\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\"><\/a><span class=\"kw\">lambda<\/span> x: x <span class=\"op\">%<\/span> <span class=\"dv\">3<\/span> <span class=\"op\">==<\/span> <span class=\"dv\">0<\/span><\/span>\r\n<span id=\"cb3-2\"><a href=\"#cb3-2\"><\/a><\/span>\r\n<span id=\"cb3-3\"><a href=\"#cb3-3\"><\/a><span class=\"co\"># similar to ...<\/span><\/span>\r\n<span id=\"cb3-4\"><a href=\"#cb3-4\"><\/a><span class=\"kw\">def<\/span> by_three(x):<\/span>\r\n<span id=\"cb3-5\"><a href=\"#cb3-5\"><\/a>    <span class=\"cf\">return<\/span> x <span class=\"op\">%<\/span> <span class=\"dv\">3<\/span> <span class=\"op\">==<\/span> <span class=\"dv\">0<\/span><\/span>\r\n<span id=\"cb3-6\"><a href=\"#cb3-6\"><\/a><\/span>\r\n<span id=\"cb3-7\"><a href=\"#cb3-7\"><\/a><span class=\"co\"># and ...<\/span><\/span>\r\n<span id=\"cb3-8\"><a href=\"#cb3-8\"><\/a>[x <span class=\"cf\">for<\/span> x <span class=\"kw\">in<\/span> <span class=\"bu\">range<\/span>(<span class=\"dv\">16<\/span>) <span class=\"cf\">if<\/span> x <span class=\"op\">%<\/span> <span class=\"dv\">3<\/span> <span class=\"op\">==<\/span> <span class=\"dv\">0<\/span>]<\/span><\/code><\/pre><\/div>",


  "✎ Other notes": "<p>Example of <strong>functional programming<\/strong>. Python was <a href=\"http:\/\/bit.ly\/2FEwUTy\">never intended as a functional language<\/a>, and some say it\u2019s <a href=\"http:\/\/bit.ly\/2p2dA8I\">not very good at it<\/a>.<\/p>",


  "✎ Markdown": false
}
